service: hsbc-backend-app

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  timeout: 30

  # you can overwrite defaults here
  stage: dev
  region: ca-central-1

  vpc:
    securityGroupIds:
      - !GetAtt VPC.DefaultSecurityGroup
    subnetIds:
      - !Ref SubnetAPrivate

  # you can define service wide environment variables here
  environment:
    GITHUB_WEBHOOK_SECRET: cpsc319
    GITHUB_AUTHENTICATION_TOKEN: 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
    EFS_MOUNT_PATH: ${self:custom.efsMountPath}
    SOURCE_ADDRESS: "Group 4 <cpsc319fall2021@gmail.com>"

  # you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - lambda:InvokeFunction
        - ses:SendTemplatedEmail
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DetachNetworkInterface
        - ec2:DeleteNetworkInterface
        - elasticfilesystem:ClientMount
        - elasticfilesystem:ClientRootAccess
        - elasticfilesystem:ClientWrite
        - elasticfilesystem:DescribeMountTargets
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: '*'

functions:
  webhook:
    handler: functions/webhook.webhook
    fileSystemConfig:
      localMountPath: ${self:custom.efsMountPath}
      arn: !GetAtt AccessPointResource.Arn
    events:
      - http:
          path: /webhook
          method: post
          cors: true
    maximumRetryAttempts: 0
  parseFile:
    handler: functions/parseFile.parseFile
    fileSystemConfig:
      localMountPath: ${self:custom.efsMountPath}
      arn: !GetAtt AccessPointResource.Arn
    timeout: 100
    maximumRetryAttempts: 0
  saveViolations:
    handler: functions/saveViolations.saveViolations
  monitor:
    handler: functions/monitor.monitor
    fileSystemConfig:
      localMountPath: ${self:custom.efsMountPath}
      arn: !GetAtt AccessPointResource.Arn
  users:
    handler: functions/routes/users.handler
    events:
      - http:
          path: /users
          method: ANY
      - http:
          path: /users/{proxy+}
          method: ANY
  violations:
    handler: functions/routes/violations.handler
    events:
      - http:
          path: /violations
          method: ANY
      - http:
          path: /violations/{proxy+}
          method: ANY
  rules:
    handler: functions/routes/rules.handler
    events:
      - http:
          path: /rules
          method: ANY
      - http:
          path: /rules/{proxy+}
          method: ANY
  results:
    handler: functions/routes/results.handler
    events:
      - http:
          path: /results
          method: ANY
      - http:
          path: /results/{proxy+}
          method: ANY
  emailSender:
    handler: functions/emailSender/emailSender.emailSender
    maximumRetryAttempts: 1

resources:
  Resources:
    VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: !Sub '10.0.0.0/16'
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
          - Key: Name
            Value: !Sub '10.0.0.0/16'
    VPCGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
    SubnetAPublic:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.0.0/20'
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC
    SubnetAPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: !Select [0, !GetAZs '']
        CidrBlock: !Sub '10.0.128.0/20'
        VpcId: !Ref VPC
    RouteTableAPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref VPC
    # create private route table
    RouteTableAPrivate:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
    # create route table association
    RouteTableAssociationAPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPublic
        RouteTableId: !Ref RouteTableAPublic
    RouteTableAssociationAPrivate:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref SubnetAPrivate
        RouteTableId: !Ref RouteTableAPrivate
    RouteTablePublicAInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref RouteTableAPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
    EIPA:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    NatGatewayA:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIPA.AllocationId'
        SubnetId: !Ref SubnetAPublic
    RouteA:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref RouteTableAPrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGatewayA
    ElasticFileSystem:
      Type: 'AWS::EFS::FileSystem'
      Properties:
        PerformanceMode: generalPurpose
        Encrypted: true
        FileSystemPolicy:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'elasticfilesystem:ClientMount'
              Principal:
                AWS: '*'
    # create access point resource
    AccessPointResource:
      Type: 'AWS::EFS::AccessPoint'
      DependsOn:
        - MountTargetResource1
      Properties:
        FileSystemId: !Ref ElasticFileSystem
        PosixUser:
          Uid: '1000'
          Gid: '1000'
        RootDirectory:
          CreationInfo:
            OwnerGid: '1000'
            OwnerUid: '1000'
            Permissions: '0777'
          Path: '/efs'
    # create efs mount target
    MountTargetResource1:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref ElasticFileSystem
        SubnetId: !Ref SubnetAPrivate
        SecurityGroups:
          - !GetAtt VPC.DefaultSecurityGroup

custom:
  # custom variables to be passed through as environment variables
  bucketName: serverless-lambda-storage-${self:provider.stage}
  efsMountPath: '/mnt/files'
