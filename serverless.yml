# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hsbc-backend-app-meg

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  # you can overwrite defaults here
  stage: dev
  region: us-east-1

  vpc:
    securityGroupIds:
      - !GetAtt VPC.DefaultSecurityGroup
    subnetIds:
      - !Ref PrivateSubnetA

  # you can define service wide environment variables here
  environment:
    GITHUB_WEBHOOK_SECRET: cpsc319
    GITHUB_AUTHENTICATION_TOKEN: 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
    # efsAccessPoint: fsap-099d31199150da4f8
    # LocalMountPath: /efs
    EFS_MOUNT_PATH: ${self:custom.efsMountPath}

  # you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ses:SendEmail
        - lambda:InvokeFunction
      Resource: '*'

functions:
  webhook:
    handler: functions/webhook.webhook
    role: lambdaEFSrole
    fileSystemConfig:
      localMountPath: ${self:custom.efsMountPath}
      arn: !GetAtt AccessPointResource.Arn
    events:
      - http:
          path: /webhook
          method: post
          cors: true
  users:
    handler: functions/routes/users.handler
    events:
      - http:
          path: /users
          method: ANY
      - http:
          path: /users/{proxy+}
          method: ANY
  violations:
    handler: functions/routes/violations.handler
    events:
      - http:
          path: /violations
          method: ANY
      - http:
          path: /violations/{proxy+}
          method: ANY
  emailSender:
    handler: functions/emailSender.handler

resources:
  Resources:
    FileSystemResource:
      Type: 'AWS::EFS::FileSystem'
      Properties:
        PerformanceMode: generalPurpose
        Encrypted: true
        FileSystemPolicy:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'elasticfilesystem:ClientMount'
              Principal:
                AWS: '*'
    # create efs mount target
    MountTargetResource1:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref FileSystemResource
        SubnetId: !Ref PrivateSubnetA
        SecurityGroups:
          - !GetAtt VPC.DefaultSecurityGroup
    # create access point resource
    AccessPointResource:
      Type: 'AWS::EFS::AccessPoint'
      DependsOn:
        - MountTargetResource1
      Properties:
        FileSystemId: !Ref FileSystemResource
        PosixUser:
          Uid: '1000'
          Gid: '1000'
        RootDirectory:
          CreationInfo:
            OwnerGid: '1000'
            OwnerUid: '1000'
            Permissions: '0777'
          Path: '/efs'
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.192.0.0/16
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'
    # create a single private subnet for this demo
    PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.192.10.0/24
        AvailabilityZone: !Select [0, !GetAZs ''] # Get the first AZ in the list
        MapPublicIpOnLaunch: false
    # create private route table
    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
    # create route table association
    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnetA
    lambdaEFSrole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: lambdaEFSrole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaEFSPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - elasticfilesystem:ClientMount
                    - elasticfilesystem:ClientWrite
                    - elasticfilesystem:DescribeMountTargets
                  Resource: '*'

custom:
  # custom variables to be passed through as environment variables
  bucketName: serverless-lambda-storage-${self:provider.stage}    
  efsMountPath: '/mnt/files'